#!/usr/bin/perl -w
#!/usr/bin/perl -d:ptkdb
#!


use strict;


# this statement tells the perl system to catch errors and convert
# them to messages useful to developers.  They are useful for large
# scripts, but for simple scripts of a few lines of code, they are
# more overhead than good.

$SIG{__DIE__}
    = sub {
	use Carp;

	confess @_;
    };


require GENESIS3;


package GENESIS3::Commands;

##########
# user workflow: create the model

my $NX = 2; # number of cells = NX*NY
my $NY = 2;

my $SEP_X = 0.002; # 2 mm
my $SEP_Y = 0.002;
my $SEP_Z = 1.0e-6; # give it a tiny z range in case of round off errors

my $syn_weight = 10; # synaptic weight, effectively multiplies gmax

my $cond_vel = 0.5; # m/sec

my $prop_delay = $SEP_X / $cond_vel;

ndf_load_namespace('rscell', 'cells/RScell-nolib2.ndf');
create('network', '/RSNet');
createmap('::rscell::/cell', '/RSNet/population', $NX, $NY, $SEP_X, $SEP_Y);

createprojection
    (
     {
      root => '/RSNet',
      projection => {
		     name => '/RSNet/projection',
# 		     source => '../population', # optional
# 		     target => '../population', # optional
		    },
      source => {
		 context => '/RSNet/population',
		 include => {
			     type => 'box', # type => 'all' would remove the need for the line below
			     coordinates => [ '-1e10', '-1e10', '-1e10', '1e10', '1e10', '1e10', ],
			    },
		},
      target => {
		 context => '/RSNet/population',
		 include => {
			     type => 'ellipse',
			     coordinates => [ 0, 0, 0, $SEP_X * 1.2, $SEP_Y * 1.2, $SEP_Z * 0.5, ],
			    },
		 exclude => {
			     type => 'box',
			     coordinates => [ - $SEP_X * 0.5, - $SEP_Y * 0.5, - $SEP_Z * 0.5, $SEP_X * 0.5, $SEP_Y * 0.5, $SEP_Z * 0.5, ],
			    },
		},
      synapse => {
		  pre => 'spike',
		  post => 'Ex_channel',
		  weight => {
# 			     type => 'fixed', # not sure yet, weight distribution example needed
			     value => $syn_weight,
			    },
		  delay => {
# 			    type => 'fixed', # not sure yet, variable delay example needed
			    value => $prop_delay,
# 			    velocity => 0.5, # alternative to fixed delay?
			   },
		 },
      probability => '1.0',
      random_seed => '1212.0',
     },
    );


##########
# user workflow: create the experiment

# create a current injection protocol

inputclass_add('perfectclamp', 'current_injection_protocol', 'name', 'current_injection', 'command', '1e-9');
input_add('current_injection_protocol', '/RSNet/population/3/soma', 'INJECT');

ce('/RSNet/population');

for (my $counter = 0 ; $counter < $NX * $NY ; $counter++)
{
    output_add($counter . '/soma', 'Vm');
}

for (my $counter = 0 ; $counter < $NX * $NY ; $counter++)
{
    output_add($counter . '/soma/Ex_channel', 'Gsyn');
}

# ndf_save("/**", "/tmp/network-simple.ndf");

##########
# user workflow: configure the simulation

# configure the numerical solver

heccer_set_config('disassem_simple');

set_verbose('debug');

ce('/RSNet/population');

for (my $counter = 0 ; $counter < $NX * $NY ; $counter++)
{
    solverset($counter, 'heccer', '/RSNet');
}

solverset('/RSNet/projection', 'des', '/RSNet');

# save the schedule for later use

ssp_save('/RSNet', '/tmp/network-simple.ssp');
# model_parameter_add('rscell1::cell/soma/Ex_channel', 'G_MAX', '1.5e-8');
# model_parameter_add('rscell1::cell/soma/Ex_channel', 'Erev', '0');


##########
# user workflow: run the simulation

# run the simulation

run('/RSNet', '0.2');

# explore();

