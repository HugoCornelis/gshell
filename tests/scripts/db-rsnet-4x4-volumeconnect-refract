#!/usr/bin/perl -w
#!/usr/bin/perl -d:ptkdb
#!


use strict;


$ENV{NEUROSPACES_NMC_MODELS} = '/usr/local/neurospaces/models/library';


$SIG{__DIE__}
    = sub {
	use Carp;

	confess @_;
    };


require GENESIS3;


package GENESIS3::Commands;

##########
# user workflow: create the model

my $NX = 4; # number of cells = NX*NY
my $NY = 4;

my $SEP_X = 0.001; # 1 mm
my $SEP_Y = 0.001;
my $SEP_Z = 1.0e-6; # give it a tiny z range in case of round off errors

my $syn_weight = 10; # synaptic weight, effectively multiplies gmax

my $cond_vel = 0.5; # m/sec

my $prop_delay = $SEP_X / $cond_vel; # = 2 msec

# load the neuron prototype
ndf_load_library('rscell', 'cells/RScell-nolib2.ndf');

# modify it to our taste
# with a soma area of 3.463609149e-08, this gives gmax = 1.5e-9
model_parameter_add('::rscell::/cell/soma/Ex_channel', 'G_MAX', '0.04330736624');
# give a more realistic reversal potential
model_parameter_add('::rscell::/cell/soma/Ex_channel', 'Erev', '0');

# # Reduce the default refractory period to a more reasonable 4 msec
# model_parameter_add('::rscell::/cell/soma/spike', 'REFRACTORY', '0.004');

create('network', '/RSNet');
createmap('::rscell::/cell', '/RSNet/population', $NX, $NY, $SEP_X, $SEP_Y);
volumeconnect('/RSNet', '/RSNet/projection', '../population', '../population', '/RSNet/population', '/RSNet/population', 'spike', 'Ex_channel', 'box', '-1e10', '-1e10', '-1e10', '1e10', '1e10', '1e10', 'ellipse', 0, 0, 0, $SEP_X * 1.2, $SEP_Y * 1.2, $SEP_Z * 0.5, 'weight', $syn_weight, 'delay', 'fixed', $prop_delay, 'velocity', '0.5', 'destination_hole', 'box', - $SEP_X * 0.5, - $SEP_Y * 0.5, - $SEP_Z * 0.5, $SEP_X * 0.5, $SEP_Y * 0.5, $SEP_Z * 0.5, '1.0', '1212.0');


##########
# user workflow: create the experiment

# create a current injection protocol

inputclass_add('perfectclamp', 'current_injection_protocol', 'name', 'current_injection', 'command', '1e-9');
input_add('current_injection_protocol', '/RSNet/population/3/soma', 'INJECT');

ce('/RSNet/population');

# output_resolution('10');

for (my $counter = 0 ; $counter < $NX * $NY ; $counter++)
{
    output_add($counter . '/soma', 'Vm');
}

# Use this if one wanted a record of synaptic concuctance 
# for (my $counter = 0 ; $counter < $NX * $NY ; $counter++)
# {
#   output_add($counter . '/soma/Ex_channel', 'Gsyn');
# }

# ndf_save("/**", "/tmp/network-simple.ndf");

##########
# user workflow: configure the simulation

# configure the numerical solver

heccer_set_config('disassem_simple');

set_verbose('debug');

ce('/RSNet/population');

for (my $counter = 0 ; $counter < $NX * $NY ; $counter++)
{
    solverset($counter, 'heccer', '/RSNet');
}

solverset('/RSNet/projection', 'des', '/RSNet');

# save the schedule for later use

ssp_save('/RSNet', '/tmp/network-simple.ssp');
# model_parameter_add('rscell1::cell/soma/Ex_channel', 'G_MAX', '1.5e-8');
# model_parameter_add('rscell1::cell/soma/Ex_channel', 'Erev', '0');


# run the simulation

run('/RSNet', '0.2');

# explore();
